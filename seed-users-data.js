const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Read environment variables
const envPath = path.join(__dirname, '.env.local');
const envContent = fs.readFileSync(envPath, 'utf-8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    envVars[key.trim()] = valueParts.join('=').trim();
  }
});

const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Generate short UUID (12 characters)
function generateShortId() {
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 12; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Sample data
const genders = ['Male', 'Female', 'Other'];
const contractTypes = ['Owner', 'Renter', 'Lease', 'Short-term'];
const nationalities = ['Vietnamese', 'American', 'Korean', 'Japanese', 'Chinese', 'Thai', 'Singapore', 'British', 'Australian'];
const roomPrefixes = ['A', 'B', 'C', 'D', 'E', 'F'];

function generatePhoneNumber() {
  // Vietnamese phone format: 09XX XXX XXX or 08XX XXX XXX
  const prefixes = ['090', '091', '093', '094', '097', '098', '084', '085', '086', '088'];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const middle = Math.floor(Math.random() * 900 + 100);
  const last = Math.floor(Math.random() * 900 + 100);
  return `${prefix} ${middle} ${last}`;
}

function generateRoomNumber() {
  const prefix = roomPrefixes[Math.floor(Math.random() * roomPrefixes.length)];
  const floor = Math.floor(Math.random() * 20 + 1);
  const room = Math.floor(Math.random() * 10 + 1);
  return `${prefix}${floor}${room.toString().padStart(2, '0')}`;
}

async function seedUsersData() {
  try {
    console.log('Starting to seed users data...\n');

    // First, get all property units to assign to users
    const { data: propertyUnits, error: unitsError } = await supabase
      .from('property_units')
      .select('id, code, name')
      .limit(50);

    if (unitsError) {
      console.error('Error fetching property units:', unitsError);
      return;
    }

    console.log(`Found ${propertyUnits?.length || 0} property units\n`);

    // Get all users
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, name, role');

    if (usersError) {
      console.error('Error fetching users:', usersError);
      return;
    }

    console.log(`Found ${users?.length || 0} users to update\n`);

    let updatedCount = 0;

    // Update each user with sample data
    for (const user of users) {
      const randomPropertyUnit = propertyUnits && propertyUnits.length > 0 
        ? propertyUnits[Math.floor(Math.random() * propertyUnits.length)]
        : null;

      const updateData = {
        property_unit_id: randomPropertyUnit?.id || null,
        property_name: randomPropertyUnit?.name || `Property ${Math.floor(Math.random() * 100)}`,
        room_number: generateRoomNumber(),
        gender: genders[Math.floor(Math.random() * genders.length)],
        contract_type: contractTypes[Math.floor(Math.random() * contractTypes.length)],
        phone_number: generatePhoneNumber(),
        nationality: nationalities[Math.floor(Math.random() * nationalities.length)],
        full_name: user.name || `User ${user.email?.split('@')[0]}`,
        updated_at: new Date().toISOString(),
      };

      const { error: updateError } = await supabase
        .from('users')
        .update(updateData)
        .eq('id', user.id);

      if (updateError) {
        console.error(`Error updating user ${user.email}:`, updateError);
      } else {
        updatedCount++;
        console.log(`‚úì Updated: ${user.email} - ${updateData.room_number} - ${updateData.nationality}`);
      }
    }

    console.log(`\n‚úÖ Successfully updated ${updatedCount} users with sample data!`);

    // Note about short IDs
    console.log('\nüìù Note about Short IDs:');
    console.log('UUID shortening requires database migration.');
    console.log('Current UUIDs are generated by Supabase (36 chars with hyphens).');
    console.log('To use 12-char IDs, you would need to:');
    console.log('1. Change id column type from UUID to TEXT');
    console.log('2. Remove UUID default generator');
    console.log('3. Use custom ID generation in application code');
    console.log('\nExample short ID:', generateShortId());
    console.log('\nDo you want to proceed with ID migration? (This requires ALTER TABLE)');

  } catch (error) {
    console.error('Error seeding users data:', error);
  }
}

seedUsersData();
